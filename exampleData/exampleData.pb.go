// Code generated by protoc-gen-go. DO NOT EDIT.
// source: exampleData.proto

package exampleData

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BinaryTreeNodeExampleData struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Pid                  *int32   `protobuf:"varint,2,opt,name=Pid" json:"Pid,omitempty"`
	LchildId             *int32   `protobuf:"varint,3,opt,name=LchildId" json:"LchildId,omitempty"`
	RchildId             *int32   `protobuf:"varint,4,opt,name=RchildId" json:"RchildId,omitempty"`
	ExtInfo              []byte   `protobuf:"bytes,5,opt,name=ExtInfo" json:"ExtInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BinaryTreeNodeExampleData) Reset()         { *m = BinaryTreeNodeExampleData{} }
func (m *BinaryTreeNodeExampleData) String() string { return proto.CompactTextString(m) }
func (*BinaryTreeNodeExampleData) ProtoMessage()    {}
func (*BinaryTreeNodeExampleData) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfd2825ac8a8420f, []int{0}
}

func (m *BinaryTreeNodeExampleData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BinaryTreeNodeExampleData.Unmarshal(m, b)
}
func (m *BinaryTreeNodeExampleData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BinaryTreeNodeExampleData.Marshal(b, m, deterministic)
}
func (m *BinaryTreeNodeExampleData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BinaryTreeNodeExampleData.Merge(m, src)
}
func (m *BinaryTreeNodeExampleData) XXX_Size() int {
	return xxx_messageInfo_BinaryTreeNodeExampleData.Size(m)
}
func (m *BinaryTreeNodeExampleData) XXX_DiscardUnknown() {
	xxx_messageInfo_BinaryTreeNodeExampleData.DiscardUnknown(m)
}

var xxx_messageInfo_BinaryTreeNodeExampleData proto.InternalMessageInfo

func (m *BinaryTreeNodeExampleData) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BinaryTreeNodeExampleData) GetPid() int32 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *BinaryTreeNodeExampleData) GetLchildId() int32 {
	if m != nil && m.LchildId != nil {
		return *m.LchildId
	}
	return 0
}

func (m *BinaryTreeNodeExampleData) GetRchildId() int32 {
	if m != nil && m.RchildId != nil {
		return *m.RchildId
	}
	return 0
}

func (m *BinaryTreeNodeExampleData) GetExtInfo() []byte {
	if m != nil {
		return m.ExtInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*BinaryTreeNodeExampleData)(nil), "exampleData.BinaryTreeNodeExampleData")
}

func init() { proto.RegisterFile("exampleData.proto", fileDescriptor_dfd2825ac8a8420f) }

var fileDescriptor_dfd2825ac8a8420f = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0xad, 0x48, 0xcc,
	0x2d, 0xc8, 0x49, 0x75, 0x49, 0x2c, 0x49, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x46,
	0x12, 0x52, 0xea, 0x67, 0xe4, 0x92, 0x74, 0xca, 0xcc, 0x4b, 0x2c, 0xaa, 0x0c, 0x29, 0x4a, 0x4d,
	0xf5, 0xcb, 0x4f, 0x49, 0x75, 0x45, 0xc8, 0x0a, 0xf1, 0x71, 0x31, 0x79, 0xa6, 0x48, 0x30, 0x2a,
	0x30, 0x6a, 0xb0, 0x06, 0x31, 0x79, 0xa6, 0x08, 0x09, 0x70, 0x31, 0x07, 0x64, 0xa6, 0x48, 0x30,
	0x81, 0x05, 0x40, 0x4c, 0x21, 0x29, 0x2e, 0x0e, 0x9f, 0xe4, 0x8c, 0xcc, 0x9c, 0x14, 0xcf, 0x14,
	0x09, 0x66, 0xb0, 0x30, 0x9c, 0x0f, 0x92, 0x0b, 0x82, 0xc9, 0xb1, 0x40, 0xe4, 0x60, 0x7c, 0x21,
	0x09, 0x2e, 0x76, 0xd7, 0x8a, 0x12, 0xcf, 0xbc, 0xb4, 0x7c, 0x09, 0x56, 0x05, 0x46, 0x0d, 0x9e,
	0x20, 0x18, 0x17, 0x10, 0x00, 0x00, 0xff, 0xff, 0x60, 0x2a, 0xcf, 0x73, 0xb2, 0x00, 0x00, 0x00,
}
